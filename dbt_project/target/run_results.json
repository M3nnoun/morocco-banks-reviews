{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.3", "generated_at": "2025-06-04T19:48:22.545947Z", "invocation_id": "379d7b13-d4e9-4e43-aa4e-5e9bda97ac04", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T19:48:20.893759Z", "completed_at": "2025-06-04T19:48:20.911613Z"}, {"name": "execute", "started_at": "2025-06-04T19:48:20.912833Z", "completed_at": "2025-06-04T19:48:21.120367Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.22906708717346191, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.dbt_project.stg_reviews", "compiled": true, "compiled_code": "\n\nSELECT\n    id,\n    city,\n    business_name,\n    address,\n    review_text,\n    stars,\n    timestamp,\n    scraped_at\nFROM \"google_reviews_db\".\"public\".\"reviews\"\n-- WHERE scraped_at >= CURRENT_DATE - INTERVAL '2 months'", "relation_name": "\"google_reviews_db\".\"public_public\".\"stg_reviews\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T19:48:21.134489Z", "completed_at": "2025-06-04T19:48:21.142569Z"}, {"name": "execute", "started_at": "2025-06-04T19:48:21.143228Z", "completed_at": "2025-06-04T19:48:22.514931Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.383937120437622, "adapter_response": {"_message": "SELECT 8385", "code": "SELECT", "rows_affected": 8385}, "message": "SELECT 8385", "failures": null, "unique_id": "model.dbt_project.cleaned_reviews", "compiled": true, "compiled_code": "WITH cleaned_data AS ( \n    SELECT\n        NULLIF(TRIM(business_name), '') AS bank_name,\n        CASE \n            WHEN NULLIF(TRIM(business_name), '') IS NOT NULL AND NULLIF(TRIM(address), '') IS NOT NULL \n            THEN CONCAT(TRIM(business_name), ' - ', TRIM(address))\n            ELSE NULL\n        END AS branch_name,\n        NULLIF(TRIM(address), '') AS location,\n        NULLIF(\n            REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                    LOWER(TRIM(review_text)), \n                    '[^\\w\\s]', \n                    ' ', \n                    'g'\n                ),\n                '\\s+', \n                ' ', \n                'g'\n            ),\n            ''\n        ) AS review_text,\n        CASE\n            WHEN timestamp ~ '^[0-9]{4}-[0-9]{2}-[0-9]{2}$' THEN \n                CASE \n                    WHEN timestamp::DATE <= CURRENT_DATE THEN timestamp::DATE\n                    ELSE NULL\n                END\n            WHEN timestamp ILIKE '%jour%' THEN\n                CASE\n                    WHEN REGEXP_REPLACE(timestamp, '\\D', '', 'g') = '' THEN CURRENT_DATE - 1\n                    WHEN CAST(REGEXP_REPLACE(timestamp, '\\D', '', 'g') AS INT) BETWEEN 1 AND 1000 THEN \n                        (CURRENT_DATE - CAST(REGEXP_REPLACE(timestamp, '\\D', '', 'g') AS INT))::DATE\n                    ELSE NULL\n                END\n            WHEN timestamp ILIKE '%semaine%' THEN\n                CASE\n                    WHEN REGEXP_REPLACE(timestamp, '\\D', '', 'g') = '' THEN CURRENT_DATE - 7\n                    WHEN CAST(REGEXP_REPLACE(timestamp, '\\D', '', 'g') AS INT) BETWEEN 1 AND 500 THEN \n                        (CURRENT_DATE - CAST(REGEXP_REPLACE(timestamp, '\\D', '', 'g') AS INT) * 7)::DATE\n                    ELSE NULL\n                END\n            WHEN timestamp ILIKE '%mois%' THEN\n                CASE\n                    WHEN REGEXP_REPLACE(timestamp, '\\D', '', 'g') = '' THEN CURRENT_DATE - INTERVAL '1 month'\n                    WHEN CAST(REGEXP_REPLACE(timestamp, '\\D', '', 'g') AS INT) BETWEEN 1 AND 120 THEN \n                        (CURRENT_DATE - INTERVAL '1 month' * CAST(REGEXP_REPLACE(timestamp, '\\D', '', 'g') AS INT))::DATE\n                    ELSE NULL\n                END\n            WHEN timestamp ILIKE '%an%' THEN\n                CASE\n                    WHEN REGEXP_REPLACE(timestamp, '\\D', '', 'g') = '' THEN CURRENT_DATE - INTERVAL '1 year'\n                    WHEN CAST(REGEXP_REPLACE(timestamp, '\\D', '', 'g') AS INT) BETWEEN 1 AND 50 THEN \n                        (CURRENT_DATE - INTERVAL '1 year' * CAST(REGEXP_REPLACE(timestamp, '\\D', '', 'g') AS INT))::DATE\n                    ELSE NULL\n                END\n            ELSE NULL\n        END AS review_date,\n        CASE\n            WHEN stars IS NULL THEN NULL\n            WHEN CAST(stars AS DECIMAL) BETWEEN 0 AND 5 THEN CAST(stars AS DECIMAL)\n            ELSE NULL\n        END AS rating,\n        id AS review_id,\n        -- Nettoyage et normalisation des noms de villes\n        city AS clean_city\n    FROM \n        \"google_reviews_db\".\"public_public\".\"stg_reviews\"\n    WHERE \n        review_text IS NOT NULL\n        AND LENGTH(TRIM(review_text)) > 5\n        AND TRIM(review_text) != 'No review text found'\n        AND TRIM(review_text) NOT ILIKE 'no%review%'\n        AND TRIM(review_text) NOT ILIKE '%review text%'\n),\n\ndeduplicated_data AS (\n    SELECT \n        *,\n        ROW_NUMBER() OVER (\n            PARTITION BY \n                COALESCE(bank_name, ''),\n                COALESCE(branch_name, ''),\n                COALESCE(review_text, ''),\n                COALESCE(rating, 0),\n                COALESCE(clean_city, '')\n            ORDER BY \n                review_date DESC NULLS LAST,\n                review_id\n        ) AS row_num\n    FROM \n        cleaned_data\n    WHERE \n        clean_city IS NOT NULL  -- Exclure les lignes sans ville valide\n)\n\nSELECT\n    bank_name,\n    branch_name,\n    location,\n    clean_city AS city,\n    \n    (SELECT string_agg(word, ' ') \n     FROM unnest(string_to_array(review_text, ' ')) AS word\n     WHERE word NOT IN (\n         'je', 'tu', 'il', 'elle', 'nous', 'vous', 'ils', 'elles', \n         'me', 'te', 'se', 'le', 'la', 'les', 'lui', 'leur', 'y', 'en', \n         'mon', 'ton', 'son', 'notre', 'votre', 'leur', 'ma', 'ta', 'sa', \n         'mes', 'tes', 'ses', 'nos', 'vos', 'leurs', \n         'ce', 'cet', 'cette', 'ces', 'ceci', 'cela', 'celui', 'celle', \n         'ceux', 'celles', 'qui', 'que', 'quoi', 'dont', 'o\u00f9', \n         'et', 'ou', 'mais', 'donc', 'or', 'ni', 'car', \n         '\u00e0', 'de', 'en', 'pour', 'par', 'avec', 'sans', 'sous', 'sur', 'dans', 'entre', \n         'au', 'aux', 'du', 'des', 'un', 'une', 'le', 'la', 'les', 'l', \n         'ne', 'pas', 'plus', 'moins', 'aucun', 'rien', 'tout', 'tous', 'toutes', 'chaque', \n         'quelques', 'certains', 'certaines', 'autre', 'autres', \n         'm\u00eame', 'm\u00eames', 'ainsi', 'alors', 'donc', 'puis', 'ensuite', \n         'avant', 'apr\u00e8s', 'depuis', 'pendant', 'toujours', 'jamais', 'souvent', \n         'ici', 'l\u00e0', 'ailleurs', 'partout', 'nulle part', \n         'comment', 'pourquoi', 'parce que', 'combien', 'quel', 'quelle', 'quels', 'quelles', \n         'si', 'quand', 'tant', 'trop', 'tr\u00e8s', 'peu', 'assez', 'bien', 'mal', 'mieux', \n         'cependant', 'pourtant', 'tandis', 'lorsque', 'quand', 'comme', 'ainsi que'\n     ))\n AS review_text_cleaned,\n    rating,\n    review_date\nFROM \n    deduplicated_data\nWHERE \n    row_num = 1\n    AND bank_name IS NOT NULL\n    AND review_text IS NOT NULL\n    AND clean_city IS NOT NULL\n    AND LENGTH(\n    (SELECT string_agg(word, ' ') \n     FROM unnest(string_to_array(review_text, ' ')) AS word\n     WHERE word NOT IN (\n         'je', 'tu', 'il', 'elle', 'nous', 'vous', 'ils', 'elles', \n         'me', 'te', 'se', 'le', 'la', 'les', 'lui', 'leur', 'y', 'en', \n         'mon', 'ton', 'son', 'notre', 'votre', 'leur', 'ma', 'ta', 'sa', \n         'mes', 'tes', 'ses', 'nos', 'vos', 'leurs', \n         'ce', 'cet', 'cette', 'ces', 'ceci', 'cela', 'celui', 'celle', \n         'ceux', 'celles', 'qui', 'que', 'quoi', 'dont', 'o\u00f9', \n         'et', 'ou', 'mais', 'donc', 'or', 'ni', 'car', \n         '\u00e0', 'de', 'en', 'pour', 'par', 'avec', 'sans', 'sous', 'sur', 'dans', 'entre', \n         'au', 'aux', 'du', 'des', 'un', 'une', 'le', 'la', 'les', 'l', \n         'ne', 'pas', 'plus', 'moins', 'aucun', 'rien', 'tout', 'tous', 'toutes', 'chaque', \n         'quelques', 'certains', 'certaines', 'autre', 'autres', \n         'm\u00eame', 'm\u00eames', 'ainsi', 'alors', 'donc', 'puis', 'ensuite', \n         'avant', 'apr\u00e8s', 'depuis', 'pendant', 'toujours', 'jamais', 'souvent', \n         'ici', 'l\u00e0', 'ailleurs', 'partout', 'nulle part', \n         'comment', 'pourquoi', 'parce que', 'combien', 'quel', 'quelle', 'quels', 'quelles', \n         'si', 'quand', 'tant', 'trop', 'tr\u00e8s', 'peu', 'assez', 'bien', 'mal', 'mieux', \n         'cependant', 'pourtant', 'tandis', 'lorsque', 'quand', 'comme', 'ainsi que'\n     ))\n) > 3\nORDER BY\n    clean_city,\n    bank_name,\n    branch_name,\n    review_date DESC NULLS LAST", "relation_name": "\"google_reviews_db\".\"public_public\".\"cleaned_reviews\"", "batch_results": null}], "elapsed_time": 1.952531099319458, "args": {"which": "run", "require_explicit_package_overrides_for_builtin_materializations": true, "require_nested_cumulative_type_params": false, "use_colors_file": true, "static_parser": true, "require_batched_execution_for_custom_microbatch_strategy": false, "send_anonymous_usage_stats": true, "show_resource_report": false, "log_format_file": "debug", "strict_mode": false, "cache_selected_only": false, "write_json": true, "state_modified_compare_vars": false, "select": [], "log_level_file": "debug", "partial_parse": true, "profiles_dir": "/home/elhassan/.dbt", "require_resource_names_without_spaces": false, "log_path": "/home/elhassan/airflow/dbt_project/logs", "macro_debugging": false, "partial_parse_file_diff": true, "populate_cache": true, "invocation_command": "dbt run", "log_file_max_bytes": 10485760, "state_modified_compare_more_unrendered_values": false, "exclude": [], "indirect_selection": "eager", "vars": {}, "log_format": "default", "source_freshness_run_project_hooks": false, "introspect": true, "defer": false, "project_dir": "/home/elhassan/airflow/dbt_project", "use_colors": true, "skip_nodes_if_on_run_start_fails": false, "print": true, "require_yaml_configuration_for_mf_time_spines": false, "log_level": "info", "empty": false, "version_check": true, "quiet": false, "warn_error_options": {"include": [], "exclude": []}, "favor_state": false, "printer_width": 80}}