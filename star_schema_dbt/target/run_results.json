{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.3", "generated_at": "2025-06-07T22:55:59.808987Z", "invocation_id": "984d3797-6981-4dee-af19-8280043dca84", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-07T22:55:50.129350Z", "completed_at": "2025-06-07T22:55:50.154020Z"}, {"name": "execute", "started_at": "2025-06-07T22:55:50.154835Z", "completed_at": "2025-06-07T22:55:50.356568Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.23084592819213867, "adapter_response": {"_message": "SELECT 137", "code": "SELECT", "rows_affected": 137}, "message": "SELECT 137", "failures": null, "unique_id": "model.star_schema_dbt.dim_region", "compiled": true, "compiled_code": "-- models/staging/dim_region.sql\n-- Nouveau mod\u00e8le pour la dimension r\u00e9gion\n\n\nSELECT\n    DENSE_RANK() OVER (ORDER BY region_name) AS region_id,\n    region_name,\n    city\nFROM (\n    VALUES\n        -- Mapping des villes vers les r\u00e9gions\n        -- Tanger-T\u00e9touan-Al Hoceima\n        ('Al Aaroui', 'Tanger-T\u00e9touan-Al Hoceima'),\n        ('Fnideq', 'Tanger-T\u00e9touan-Al Hoceima'),\n        ('Chefchaouen', 'Tanger-T\u00e9touan-Al Hoceima'),\n        ('Assilah', 'Tanger-T\u00e9touan-Al Hoceima'),\n        ('Al Hoceima', 'Tanger-T\u00e9touan-Al Hoceima'),\n        ('Ajdir', 'Tanger-T\u00e9touan-Al Hoceima'),\n        \n        -- Rabat-Sal\u00e9-K\u00e9nitra\n        ('Ain El Aouda', 'Rabat-Sal\u00e9-K\u00e9nitra'),\n        ('Rabat', 'Rabat-Sal\u00e9-K\u00e9nitra'),\n        ('Ain Attig', 'Rabat-Sal\u00e9-K\u00e9nitra'),\n        ('Harhoura', 'Rabat-Sal\u00e9-K\u00e9nitra'),\n        \n        -- Grand Casablanca-Settat\n        ('Casablanca', 'Grand Casablanca-Settat'),\n        ('Dar Bouazza', 'Grand Casablanca-Settat'),\n        ('Bouskoura', 'Grand Casablanca-Settat'),\n        ('Ben Ahmed', 'Grand Casablanca-Settat'),\n        ('Benslimane', 'Grand Casablanca-Settat'),\n        ('Berrechid', 'Grand Casablanca-Settat'),\n        ('El Borouj', 'Grand Casablanca-Settat'),\n        ('El Jadida', 'Grand Casablanca-Settat'),\n        ('Azemmour', 'Grand Casablanca-Settat'),\n        ('Ain Harrouda', 'Grand Casablanca-Settat'),\n        \n        -- Marrakech-Safi\n        ('Essaouira', 'Marrakech-Safi'),\n        ('Asni', 'Marrakech-Safi'),\n        ('Chichaoua', 'Marrakech-Safi'),\n        ('Ben Guerir', 'Marrakech-Safi'),\n        ('Ait Ourir', 'Marrakech-Safi'),\n        ('El Kelaa Des Srarhna', 'Marrakech-Safi'),\n        ('Imintanoute', 'Marrakech-Safi'),\n        ('Amizmiz', 'Marrakech-Safi'),\n        \n        -- F\u00e8s-Mekn\u00e8s\n        ('Fes', 'F\u00e8s-Mekn\u00e8s'),\n        ('Ifrane', 'F\u00e8s-Mekn\u00e8s'),\n        ('Azrou', 'F\u00e8s-Mekn\u00e8s'),\n        ('Bhalil', 'F\u00e8s-Mekn\u00e8s'),\n        ('El Hajeb', 'F\u00e8s-Mekn\u00e8s'),\n        ('Boulemane', 'F\u00e8s-Mekn\u00e8s'),\n        ('Imouzzer Kandar', 'F\u00e8s-Mekn\u00e8s'),\n        ('Ain Leuh', 'F\u00e8s-Mekn\u00e8s'),\n        ('Boufakrane', 'F\u00e8s-Mekn\u00e8s'),\n        ('Ain Taoujdate', 'F\u00e8s-Mekn\u00e8s'),\n        \n        -- B\u00e9ni Mellal-Kh\u00e9nifra\n        ('Beni Mellal', 'B\u00e9ni Mellal-Kh\u00e9nifra'),\n        ('Azilal', 'B\u00e9ni Mellal-Kh\u00e9nifra'),\n        ('Demnate', 'B\u00e9ni Mellal-Kh\u00e9nifra'),\n        ('Fquih Ben Salah', 'B\u00e9ni Mellal-Kh\u00e9nifra'),\n        ('El Ksiba', 'B\u00e9ni Mellal-Kh\u00e9nifra'),\n        ('Bzou', 'B\u00e9ni Mellal-Kh\u00e9nifra'),\n        ('Aghbala', 'B\u00e9ni Mellal-Kh\u00e9nifra'),\n        ('Aguelmous', 'B\u00e9ni Mellal-Kh\u00e9nifra'),\n        \n        -- Souss-Massa\n        ('Agadir', 'Souss-Massa'),\n        ('Aourir', 'Souss-Massa'),\n        ('Inezgane', 'Souss-Massa'),\n        ('Ait Melloul', 'Souss-Massa'),\n        ('Biougra', 'Souss-Massa'),\n        ('Aoulouz', 'Souss-Massa'),\n        ('Imouzzer', 'Souss-Massa'),\n        \n        -- Oriental\n        ('Berkane', 'Oriental'),\n        ('Ahfir', 'Oriental'),\n        ('Ain Aicha', 'Oriental'),\n        ('Driouch', 'Oriental'),\n        ('Guercif', 'Oriental'),\n        ('Bouarfa', 'Oriental'),\n        ('Figuig', 'Oriental'),\n        ('Ain Bni Mathar', 'Oriental'),\n        \n        -- Dr\u00e2a-Tafilalet\n        ('Errachidia', 'Dr\u00e2a-Tafilalet'),\n        ('Er-Rich', 'Dr\u00e2a-Tafilalet'),\n        ('Goulmima', 'Dr\u00e2a-Tafilalet'),\n        ('Arfoud', 'Dr\u00e2a-Tafilalet'),\n        ('Er-Rissani', 'Dr\u00e2a-Tafilalet'),\n        ('Boumia', 'Dr\u00e2a-Tafilalet'),\n        ('Boumalne Dades', 'Dr\u00e2a-Tafilalet'),\n        ('Agdz', 'Dr\u00e2a-Tafilalet'),\n        \n        -- Guelmim-Oued Noun\n        ('Guelmim', 'Guelmim-Oued Noun'),\n        ('Assa', 'Guelmim-Oued Noun'),\n        ('Foum Zguid', 'Guelmim-Oued Noun'),\n        \n        -- La\u00e2youne-Sakia El Hamra\n        ('Boujdour', 'La\u00e2youne-Sakia El Hamra'),\n        \n        -- Dakhla-Oued Ed-Dahab\n        ('Dakhla', 'Dakhla-Oued Ed-Dahab'),\n        \n        -- Villes avec mapping approximatif (\u00e0 v\u00e9rifier selon vos donn\u00e9es)\n        ('Bradia', 'F\u00e8s-Mekn\u00e8s'),\n        ('El Gara', 'Tanger-T\u00e9touan-Al Hoceima'),\n        ('Had Al Gharbia', 'Rabat-Sal\u00e9-K\u00e9nitra'),\n        ('Agourai', 'F\u00e8s-Mekn\u00e8s'),\n        ('Bejaad', 'Grand Casablanca-Settat'),\n        ('Houara Oulad Raho', 'Tanger-T\u00e9touan-Al Hoceima'),\n        ('El Guerdane', 'Souss-Massa'),\n        ('Gueznaia', 'Tanger-T\u00e9touan-Al Hoceima'),\n        ('Ain Zohra', 'Rabat-Sal\u00e9-K\u00e9nitra'),\n        ('Ait M''Hamed', 'B\u00e9ni Mellal-Kh\u00e9nifra'),\n        ('Ait Erkha', 'Souss-Massa'),\n        ('Issafen', 'Souss-Massa'),\n        ('Irherm', 'Souss-Massa'),\n        ('Belfaa', 'Souss-Massa'),\n        ('Ait Ouassif', 'Souss-Massa'),\n        ('Ait Baha', 'Souss-Massa'),\n        ('Tafraout', 'Souss-Massa'),\n        ('Taliouine', 'Souss-Massa'),\n        ('Tiznit', 'Souss-Massa'),\n        ('Tafoughalt', 'Oriental'),\n        ('Bni Oukil', 'F\u00e8s-Mekn\u00e8s'),\n        ('Bni Bouayach', 'Tanger-T\u00e9touan-Al Hoceima'),\n        ('Bni Yakhlef', 'Grand Casablanca-Settat'),\n        ('Bni Drar', 'Oriental'),\n        ('Bni Hadifa', 'Tanger-T\u00e9touan-Al Hoceima'),\n        ('Bab Taza', 'F\u00e8s-Mekn\u00e8s'),\n        ('Bab Marzouka', 'F\u00e8s-Mekn\u00e8s'),\n        ('El Kbab', 'F\u00e8s-Mekn\u00e8s'),\n        ('Bni Chiker', 'Tanger-T\u00e9touan-Al Hoceima'),\n        ('Dcheira El Jihadia', 'Souss-Massa'),\n        ('Issaguen', 'Souss-Massa'),\n        ('Ghmate', 'Marrakech-Safi'),\n        ('Imzouren', 'Tanger-T\u00e9touan-Al Hoceima'),\n        ('Chougrane', 'F\u00e8s-Mekn\u00e8s'),\n        ('Bni Yakhlef', 'Grand Casablanca-Settat'),\n        ('Arbaa Rasmouka', 'Marrakech-Safi'),\n        ('El Mansouria', 'Grand Casablanca-Settat'),\n        ('El Aioun Sidi Mellouk', 'Oriental'),\n        ('Bni Hadifa', 'Tanger-T\u00e9touan-Al Hoceima'),\n        ('Bab Taza', 'F\u00e8s-Mekn\u00e8s'),\n        ('El Kbab', 'F\u00e8s-Mekn\u00e8s'),\n        ('Fdalate', 'Marrakech-Safi'),\n        ('Bouguedra', 'Grand Casablanca-Settat'),\n        ('Arbaoua', 'Rabat-Sal\u00e9-K\u00e9nitra'),\n        ('Dar Chaoui', 'Rabat-Sal\u00e9-K\u00e9nitra'),\n        ('Adrej', 'Souss-Massa'),\n        ('Bni Drar', 'Oriental'),\n        ('Brachoua', 'Grand Casablanca-Settat'),\n        ('Irigh N''Tahala', 'Souss-Massa'),\n        ('Ghafsai', 'F\u00e8s-Mekn\u00e8s'),\n        ('Ezzhiliga', 'Souss-Massa'),\n        ('Bab Marzouka', 'F\u00e8s-Mekn\u00e8s'),\n        ('Bni Bouayach', 'Tanger-T\u00e9touan-Al Hoceima'),\n        ('Echemmaia', 'F\u00e8s-Mekn\u00e8s'),\n        ('Dar Ould Zidouh', 'Marrakech-Safi'),\n        ('Boudinar', 'Tanger-T\u00e9touan-Al Hoceima'),\n        ('Ain Dfali', 'F\u00e8s-Mekn\u00e8s'),\n        ('Ait Ishaq', 'Marrakech-Safi'),\n        ('Boujniba', 'Grand Casablanca-Settat'),\n        ('Ain Cheggag', 'F\u00e8s-Mekn\u00e8s'),\n        ('Had Dra', 'Marrakech-Safi'),\n        ('Dar El Kebdani', 'Oriental'),\n        \n        -- R\u00e9gion par d\u00e9faut pour les villes non mapp\u00e9es\n        ('Autre', 'Non d\u00e9finie')\n) AS regions_mapping(city, region_name)", "relation_name": "\"google_reviews_db\".\"public_public\".\"dim_region\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-07T22:55:50.372244Z", "completed_at": "2025-06-07T22:55:50.383949Z"}, {"name": "execute", "started_at": "2025-06-07T22:55:50.384844Z", "completed_at": "2025-06-07T22:55:50.476270Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11006569862365723, "adapter_response": {"_message": "SELECT 2", "code": "SELECT", "rows_affected": 2}, "message": "SELECT 2", "failures": null, "unique_id": "model.star_schema_dbt.my_first_dbt_model", "compiled": true, "compiled_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "relation_name": "\"google_reviews_db\".\"public_public\".\"my_first_dbt_model\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-07T22:55:50.494595Z", "completed_at": "2025-06-07T22:55:50.509223Z"}, {"name": "execute", "started_at": "2025-06-07T22:55:50.513006Z", "completed_at": "2025-06-07T22:55:50.648565Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15998578071594238, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.star_schema_dbt.stg_bank_reviews", "compiled": true, "compiled_code": "WITH raw_reviews AS (\n    SELECT\n        *,\n        -- Extract city and postal_code from location\n        \n        TRIM(SPLIT_PART(location, ' ', -1)) AS postal_code\n    FROM \"google_reviews_db\".\"public_public\".\"enriched_reviews\"\n)\n\nSELECT\n    ROW_NUMBER() OVER () AS review_id,  -- Surrogate key\n    bank_name,\n    branch_name,\n    location,\n    city,\n    postal_code,\n    review_text_cleaned,\n    rating::INT,\n    review_date::DATE,\n    processed_text,\n    TRIM(topic) AS topic,              -- Clean topic name\n    topic_confidence::FLOAT,\n    LOWER(sentiment) AS sentiment      -- Standardize sentiment\nFROM raw_reviews", "relation_name": "\"google_reviews_db\".\"public_public\".\"stg_bank_reviews\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-07T22:55:50.664621Z", "completed_at": "2025-06-07T22:55:50.672781Z"}, {"name": "execute", "started_at": "2025-06-07T22:55:50.673523Z", "completed_at": "2025-06-07T22:55:50.737603Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07721686363220215, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.star_schema_dbt.my_second_dbt_model", "compiled": true, "compiled_code": "-- Use the `ref` function to select from other models\n\nselect *\nfrom \"google_reviews_db\".\"public_public\".\"my_first_dbt_model\"\nwhere id = 1", "relation_name": "\"google_reviews_db\".\"public_public\".\"my_second_dbt_model\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-07T22:55:50.749399Z", "completed_at": "2025-06-07T22:55:50.757684Z"}, {"name": "execute", "started_at": "2025-06-07T22:55:50.758521Z", "completed_at": "2025-06-07T22:55:50.832682Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08779549598693848, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.star_schema_dbt.dim_bank", "compiled": true, "compiled_code": "SELECT\n    DENSE_RANK() OVER (ORDER BY bank_name) AS bank_id,\n    bank_name\nFROM \"google_reviews_db\".\"public_public\".\"stg_bank_reviews\"\nGROUP BY bank_name", "relation_name": "\"google_reviews_db\".\"public_public\".\"dim_bank\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-07T22:55:50.845320Z", "completed_at": "2025-06-07T22:55:50.855047Z"}, {"name": "execute", "started_at": "2025-06-07T22:55:50.855950Z", "completed_at": "2025-06-07T22:55:50.913916Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07349085807800293, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.star_schema_dbt.dim_location", "compiled": true, "compiled_code": "SELECT\n    DENSE_RANK() OVER (ORDER BY location) AS location_id,\n    location,\n    city,\n    postal_code\nFROM \"google_reviews_db\".\"public_public\".\"stg_bank_reviews\"\nGROUP BY location, city, postal_code", "relation_name": "\"google_reviews_db\".\"public_public\".\"dim_location\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-07T22:55:50.930150Z", "completed_at": "2025-06-07T22:55:50.940081Z"}, {"name": "execute", "started_at": "2025-06-07T22:55:50.942098Z", "completed_at": "2025-06-07T22:55:51.018567Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09212732315063477, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.star_schema_dbt.dim_sentiment", "compiled": true, "compiled_code": "SELECT\n    DENSE_RANK() OVER (ORDER BY sentiment) AS sentiment_id,\n    sentiment AS sentiment_label\nFROM \"google_reviews_db\".\"public_public\".\"stg_bank_reviews\"\nGROUP BY sentiment", "relation_name": "\"google_reviews_db\".\"public_public\".\"dim_sentiment\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-07T22:55:51.030670Z", "completed_at": "2025-06-07T22:55:51.038494Z"}, {"name": "execute", "started_at": "2025-06-07T22:55:51.039169Z", "completed_at": "2025-06-07T22:55:51.102290Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07613730430603027, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.star_schema_dbt.dim_topic", "compiled": true, "compiled_code": "SELECT\n    DENSE_RANK() OVER (ORDER BY topic) AS topic_id,\n    topic AS topic_name\nFROM \"google_reviews_db\".\"public_public\".\"stg_bank_reviews\"\nGROUP BY topic", "relation_name": "\"google_reviews_db\".\"public_public\".\"dim_topic\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-07T22:55:51.115952Z", "completed_at": "2025-06-07T22:55:51.126702Z"}, {"name": "execute", "started_at": "2025-06-07T22:55:51.128708Z", "completed_at": "2025-06-07T22:55:51.191206Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07939767837524414, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.star_schema_dbt.dim_branch", "compiled": true, "compiled_code": "WITH branches AS (\n    SELECT\n        branch_name,\n        bank_name\n    FROM \"google_reviews_db\".\"public_public\".\"stg_bank_reviews\"\n    GROUP BY branch_name, bank_name\n)\n\nSELECT\n    DENSE_RANK() OVER (ORDER BY branch_name) AS branch_id,\n    branch_name,\n    b.bank_id\nFROM branches\nLEFT JOIN \"google_reviews_db\".\"public_public\".\"dim_bank\" b ON branches.bank_name = b.bank_name", "relation_name": "\"google_reviews_db\".\"public_public\".\"dim_branch\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-07T22:55:51.204794Z", "completed_at": "2025-06-07T22:55:51.220827Z"}, {"name": "execute", "started_at": "2025-06-07T22:55:51.222108Z", "completed_at": "2025-06-07T22:55:51.303639Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1036369800567627, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.star_schema_dbt.fact_reviews", "compiled": true, "compiled_code": "WITH reviews AS (\n    SELECT \n        review_id,\n        bank_name,\n        branch_name,\n        location,\n        topic,\n        sentiment,\n        rating,\n        topic_confidence,\n        review_date,\n        processed_text\n    FROM \"google_reviews_db\".\"public_public\".\"stg_bank_reviews\"\n),\n\n-- Calculs de m\u00e9triques d\u00e9riv\u00e9es\nenhanced_reviews AS (\n    SELECT \n        *,\n        -- M\u00e9triques de satisfaction\n        CASE \n            WHEN rating >= 4 THEN 'Satisfait'\n            WHEN rating = 3 THEN 'Neutre'\n            ELSE 'Insatisfait'\n        END AS satisfaction_level,\n        \n        -- Score de satisfaction (0-1)\n        ROUND(CAST((rating - 1.0) / 4.0 AS NUMERIC), 2) AS satisfaction_score,\n        \n        -- Indicateurs binaires pour agr\u00e9gations\n        CASE WHEN rating >= 4 THEN 1 ELSE 0 END AS is_positive_rating,\n        CASE WHEN rating <= 2 THEN 1 ELSE 0 END AS is_negative_rating,\n        CASE WHEN sentiment = 'positif' THEN 1 ELSE 0 END AS is_positive_sentiment,\n        CASE WHEN sentiment = 'n\u00e9gatif' THEN 1 ELSE 0 END AS is_negative_sentiment,\n        \n        -- Segmentation temporelle\n        EXTRACT(YEAR FROM review_date) AS review_year,\n        EXTRACT(MONTH FROM review_date) AS review_month,\n        EXTRACT(QUARTER FROM review_date) AS review_quarter,\n        TO_CHAR(review_date, 'YYYY-MM') AS year_month,\n        TO_CHAR(review_date, 'YYYY-Q') AS year_quarter,\n        \n        -- Jour de la semaine (1=Lundi, 7=Dimanche)\n        EXTRACT(ISODOW FROM review_date) AS day_of_week,\n        CASE \n            WHEN EXTRACT(ISODOW FROM review_date) IN (6,7) THEN 'Weekend'\n            ELSE 'Semaine'\n        END AS week_period,\n        \n        -- Anciennet\u00e9 de l'avis (en jours)\n        CURRENT_DATE - review_date AS review_age_days,\n        \n        -- Cat\u00e9gorisation de l'anciennet\u00e9\n        CASE \n            WHEN CURRENT_DATE - review_date <= 30 THEN 'R\u00e9cent (\u226430j)'\n            WHEN CURRENT_DATE - review_date <= 90 THEN 'Moyen (31-90j)'\n            WHEN CURRENT_DATE - review_date <= 180 THEN 'Ancien (91-180j)'\n            ELSE 'Tr\u00e8s ancien (>180j)'\n        END AS review_freshness,\n        \n        -- Score de confiance cat\u00e9goris\u00e9\n        CASE \n            WHEN topic_confidence >= 0.7 THEN '\u00c9lev\u00e9e'\n            WHEN topic_confidence >= 0.4 THEN 'Moyenne'\n            ELSE 'Faible'\n        END AS confidence_level,\n        \n        -- Longueur du texte trait\u00e9 (indicateur de d\u00e9tail)\n        LENGTH(processed_text) AS text_length,\n        CASE \n            WHEN LENGTH(processed_text) >= 200 THEN 'D\u00e9taill\u00e9'\n            WHEN LENGTH(processed_text) >= 100 THEN 'Moyen'\n            ELSE 'Court'\n        END AS review_detail_level,\n        \n        -- Alignment sentiment/rating (coh\u00e9rence)\n        CASE \n            WHEN (sentiment = 'positif' AND rating >= 4) OR \n                 (sentiment = 'n\u00e9gatif' AND rating <= 2) OR\n                 (sentiment = 'neutre' AND rating = 3) THEN 'Coh\u00e9rent'\n            ELSE 'Incoh\u00e9rent'\n        END AS sentiment_rating_alignment\n    FROM reviews\n),\n\n-- Ajout de m\u00e9triques de contexte (moyennes par banque/agence)\ncontextual_metrics AS (\n    SELECT \n        er.*,\n        \n        -- Moyennes par banque\n        ROUND(CAST(AVG(rating) OVER (PARTITION BY bank_name) AS NUMERIC), 2) AS bank_avg_rating,\n        ROUND(CAST(AVG(topic_confidence) OVER (PARTITION BY bank_name) AS NUMERIC), 2) AS bank_avg_confidence,\n        \n        -- Moyennes par agence\n        ROUND(CAST(AVG(rating) OVER (PARTITION BY bank_name, branch_name) AS NUMERIC), 2) AS branch_avg_rating,\n        ROUND(CAST(AVG(topic_confidence) OVER (PARTITION BY bank_name, branch_name) AS NUMERIC), 2) AS branch_avg_confidence,\n        \n        -- Moyennes par localisation\n        ROUND(CAST(AVG(rating) OVER (PARTITION BY location) AS NUMERIC), 2) AS location_avg_rating,\n        \n        -- Moyennes par topic\n        ROUND(CAST(AVG(rating) OVER (PARTITION BY topic) AS NUMERIC), 2) AS topic_avg_rating,\n        \n        -- Compteurs pour contexte\n        COUNT(*) OVER (PARTITION BY bank_name) AS total_reviews_bank,\n        COUNT(*) OVER (PARTITION BY bank_name, branch_name) AS total_reviews_branch,\n        COUNT(*) OVER (PARTITION BY location) AS total_reviews_location,\n        COUNT(*) OVER (PARTITION BY topic) AS total_reviews_topic\n    FROM enhanced_reviews er\n),\n\n-- Performance relative\nperformance_indicators AS (\n    SELECT \n        cm.*,\n        \n        -- Performance relative \u00e0 la moyenne de la banque\n        ROUND(CAST(rating - bank_avg_rating AS NUMERIC), 2) AS rating_vs_bank_avg,\n        ROUND(CAST(topic_confidence - bank_avg_confidence AS NUMERIC), 2) AS confidence_vs_bank_avg,\n        \n        -- Performance relative \u00e0 la moyenne par localisation\n        ROUND(CAST(rating - location_avg_rating AS NUMERIC), 2) AS rating_vs_location_avg,\n        \n        -- Performance relative \u00e0 la moyenne du topic\n        ROUND(CAST(rating - topic_avg_rating AS NUMERIC), 2) AS rating_vs_topic_avg,\n        \n        -- Indicateurs de performance\n        CASE \n            WHEN rating > bank_avg_rating THEN 'Au-dessus moyenne banque'\n            WHEN rating = bank_avg_rating THEN 'Moyenne banque'\n            ELSE 'En-dessous moyenne banque'\n        END AS performance_vs_bank,\n        \n        CASE \n            WHEN rating > location_avg_rating THEN 'Au-dessus moyenne zone'\n            WHEN rating = location_avg_rating THEN 'Moyenne zone'\n            ELSE 'En-dessous moyenne zone'\n        END AS performance_vs_location\n    FROM contextual_metrics cm\n)\n\n-- S\u00e9lection finale avec jointures aux dimensions\nSELECT \n    pi.review_id,\n    db.bank_id,\n    dbr.branch_id,\n    dl.location_id,\n    dt.topic_id,\n    ds.sentiment_id,\n    \n    -- M\u00e9triques originales\n    pi.rating,\n    pi.topic_confidence,\n    pi.review_date,\n    pi.processed_text,\n    \n    -- Nouvelles m\u00e9triques pour visualisation\n    pi.satisfaction_level,\n    pi.satisfaction_score,\n    pi.is_positive_rating,\n    pi.is_negative_rating,\n    pi.is_positive_sentiment,\n    pi.is_negative_sentiment,\n    \n    -- Dimensions temporelles\n    pi.review_year,\n    pi.review_month,\n    pi.review_quarter,\n    pi.year_month,\n    pi.year_quarter,\n    pi.day_of_week,\n    pi.week_period,\n    pi.review_age_days,\n    pi.review_freshness,\n    \n    -- M\u00e9triques de qualit\u00e9\n    pi.confidence_level,\n    pi.text_length,\n    pi.review_detail_level,\n    pi.sentiment_rating_alignment,\n    \n    -- M\u00e9triques de contexte\n    pi.bank_avg_rating,\n    pi.bank_avg_confidence,\n    pi.branch_avg_rating,\n    pi.branch_avg_confidence,\n    pi.location_avg_rating,\n    pi.topic_avg_rating,\n    pi.total_reviews_bank,\n    pi.total_reviews_branch,\n    pi.total_reviews_location,\n    pi.total_reviews_topic,\n    \n    -- Indicateurs de performance relative\n    pi.rating_vs_bank_avg,\n    pi.confidence_vs_bank_avg,\n    pi.rating_vs_location_avg,\n    pi.rating_vs_topic_avg,\n    pi.performance_vs_bank,\n    pi.performance_vs_location,\n    \n    -- M\u00e9triques calcul\u00e9es additionnelles pour Looker Studio\n    CASE WHEN pi.total_reviews_branch >= 50 THEN 'Volume \u00e9lev\u00e9' \n         WHEN pi.total_reviews_branch >= 20 THEN 'Volume moyen'\n         ELSE 'Volume faible' \n    END AS branch_review_volume_category,\n    \n    -- Score composite (pond\u00e9ration rating 70% + confidence 30%)\n    ROUND(CAST((pi.rating * 0.7) + (pi.topic_confidence * 5 * 0.3) AS NUMERIC), 2) AS composite_score\n\nFROM performance_indicators pi\nLEFT JOIN \"google_reviews_db\".\"public_public\".\"dim_bank\" db ON pi.bank_name = db.bank_name\nLEFT JOIN \"google_reviews_db\".\"public_public\".\"dim_branch\" dbr ON pi.branch_name = dbr.branch_name  \nLEFT JOIN \"google_reviews_db\".\"public_public\".\"dim_location\" dl ON pi.location = dl.location\nLEFT JOIN \"google_reviews_db\".\"public_public\".\"dim_topic\" dt ON pi.topic = dt.topic_name\nLEFT JOIN \"google_reviews_db\".\"public_public\".\"dim_sentiment\" ds ON pi.sentiment = ds.sentiment_label", "relation_name": "\"google_reviews_db\".\"public_public\".\"fact_reviews\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-07T22:55:51.324496Z", "completed_at": "2025-06-07T22:55:51.343338Z"}, {"name": "execute", "started_at": "2025-06-07T22:55:51.344140Z", "completed_at": "2025-06-07T22:55:59.764486Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 8.44734787940979, "adapter_response": {"_message": "SELECT 21703", "code": "SELECT", "rows_affected": 21703}, "message": "SELECT 21703", "failures": null, "unique_id": "model.star_schema_dbt.fact_reviews_complete", "compiled": true, "compiled_code": "-- models/marts/fact_reviews_complete.sql\n-- Table de faits finale avec toutes les dimensions\n\n\nWITH base_fact AS (\n    SELECT *\n    FROM \"google_reviews_db\".\"public_public\".\"fact_reviews\"\n),\n\n-- Enrichissement avec toutes les dimensions\nenriched_fact AS (\n    SELECT \n        bf.*,\n        \n        -- Dimensions de base\n        db.bank_name,\n        dbr.branch_name,\n        dl.location,\n        dl.city,\n        dl.postal_code,\n        dt.topic_name,\n        ds.sentiment_label,\n        \n        -- Nouvelle dimension r\u00e9gion\n        dr.region_id,\n        dr.region_name,\n        \n        -- M\u00e9triques d\u00e9riv\u00e9es suppl\u00e9mentaires\n        CASE \n            WHEN bf.composite_score >= 4.0 THEN 'Excellent'\n            WHEN bf.composite_score >= 3.5 THEN 'Bon'\n            WHEN bf.composite_score >= 2.5 THEN 'Moyen'\n            ELSE 'Faible'\n        END AS performance_category,\n        \n        -- Score normalis\u00e9 sur 100\n        ROUND(CAST(bf.composite_score * 20 AS NUMERIC), 1) AS score_sur_100,\n        \n        -- Cat\u00e9gorie de maturit\u00e9 de l'agence bas\u00e9e sur le volume\n        CASE \n            WHEN bf.total_reviews_branch >= 100 THEN 'Tr\u00e8s mature'\n            WHEN bf.total_reviews_branch >= 50 THEN 'Mature'\n            WHEN bf.total_reviews_branch >= 20 THEN 'En d\u00e9veloppement'\n            ELSE 'Nouvelle'\n        END AS branch_maturity,\n        \n        -- Indicateur de fiabilit\u00e9 bas\u00e9 sur volume et confiance\n        CASE \n            WHEN bf.total_reviews_branch >= 30 AND bf.topic_confidence >= 0.7 THEN 'Tr\u00e8s fiable'\n            WHEN bf.total_reviews_branch >= 10 AND bf.topic_confidence >= 0.5 THEN 'Fiable'\n            WHEN bf.total_reviews_branch >= 5 THEN 'Moyennement fiable'\n            ELSE 'Peu fiable'\n        END AS reliability_indicator,\n        \n        -- Segment de performance r\u00e9gionale\n        CASE \n            WHEN bf.rating_vs_location_avg > 0.5 THEN 'Leader r\u00e9gional'\n            WHEN bf.rating_vs_location_avg > 0 THEN 'Au-dessus moyenne r\u00e9gionale'\n            WHEN bf.rating_vs_location_avg >= -0.3 THEN 'Moyenne r\u00e9gionale'\n            ELSE 'En-dessous moyenne r\u00e9gionale'\n        END AS regional_performance_segment\n\n    FROM base_fact bf\n    LEFT JOIN \"google_reviews_db\".\"public_public\".\"dim_bank\" db ON bf.bank_id = db.bank_id\n    LEFT JOIN \"google_reviews_db\".\"public_public\".\"dim_branch\" dbr ON bf.branch_id = dbr.branch_id\n    LEFT JOIN \"google_reviews_db\".\"public_public\".\"dim_location\" dl ON bf.location_id = dl.location_id\n    LEFT JOIN \"google_reviews_db\".\"public_public\".\"dim_topic\" dt ON bf.topic_id = dt.topic_id\n    LEFT JOIN \"google_reviews_db\".\"public_public\".\"dim_sentiment\" ds ON bf.sentiment_id = ds.sentiment_id\n    LEFT JOIN \"google_reviews_db\".\"public_public\".\"dim_region\" dr ON dl.city = dr.city\n),\n\n-- M\u00e9triques agr\u00e9g\u00e9es par r\u00e9gion (pr\u00e9calcul\u00e9es)\nregional_aggregates AS (\n    SELECT \n        ef.region_id,\n        ef.bank_id,\n        ROUND(CAST(AVG(ef.rating) AS NUMERIC), 2) AS region_avg_rating,\n        ROUND(CAST(AVG(ef.composite_score) AS NUMERIC), 2) AS region_avg_composite_score,\n        ROUND(CAST(AVG(ef.topic_confidence) AS NUMERIC), 2) AS region_avg_confidence,\n        COUNT(*) AS total_reviews_region,\n        COUNT(DISTINCT ef.bank_id) AS total_banks_region,\n        COUNT(DISTINCT ef.branch_id) AS total_branches_region,\n        COUNT(*) AS bank_reviews_in_region,\n        ROUND(CAST(AVG(ef.rating) AS NUMERIC), 2) AS bank_avg_rating_in_region\n    FROM enriched_fact ef\n    WHERE ef.region_id IS NOT NULL\n    GROUP BY ef.region_id, ef.bank_id\n),\n\n-- Calcul des parts de march\u00e9 et rangs\nregional_market_analysis AS (\n    SELECT \n        ra.*,\n        -- Part de march\u00e9 par banque dans la r\u00e9gion\n        ROUND(CAST(\n            ra.bank_reviews_in_region * 100.0 / ra.total_reviews_region\n        AS NUMERIC), 2) AS bank_market_share_region,\n        \n        -- Rang de la banque dans la r\u00e9gion\n        DENSE_RANK() OVER (\n            PARTITION BY ra.region_id \n            ORDER BY ra.bank_avg_rating_in_region DESC\n        ) AS bank_rank_in_region\n        \n    FROM regional_aggregates ra\n),\n\n-- M\u00e9triques par r\u00e9gion uniquement (pour \u00e9viter la duplication)\nregional_totals AS (\n    SELECT \n        ef.region_id,\n        ROUND(CAST(AVG(ef.rating) AS NUMERIC), 2) AS region_avg_rating,\n        ROUND(CAST(AVG(ef.composite_score) AS NUMERIC), 2) AS region_avg_composite_score,\n        ROUND(CAST(AVG(ef.topic_confidence) AS NUMERIC), 2) AS region_avg_confidence,\n        COUNT(*) AS total_reviews_region,\n        COUNT(DISTINCT ef.bank_id) AS total_banks_region,\n        COUNT(DISTINCT ef.branch_id) AS total_branches_region\n    FROM enriched_fact ef\n    WHERE ef.region_id IS NOT NULL\n    GROUP BY ef.region_id\n),\n\n-- Jointure finale avec les m\u00e9triques r\u00e9gionales\nregional_context AS (\n    SELECT \n        ef.*,\n        rt.region_avg_rating,\n        rt.region_avg_composite_score,\n        rt.region_avg_confidence,\n        rt.total_reviews_region,\n        rt.total_banks_region,\n        rt.total_branches_region,\n        COALESCE(rma.bank_market_share_region, 0) AS bank_market_share_region,\n        COALESCE(rma.bank_rank_in_region, 999) AS bank_rank_in_region\n        \n    FROM enriched_fact ef\n    LEFT JOIN regional_totals rt ON ef.region_id = rt.region_id\n    LEFT JOIN regional_market_analysis rma ON ef.region_id = rma.region_id AND ef.bank_id = rma.bank_id\n)\n\n-- S\u00e9lection finale avec toutes les m\u00e9triques\nSELECT \n    -- IDs et cl\u00e9s\n    rc.review_id,\n    rc.bank_id,\n    rc.branch_id,\n    rc.location_id,\n    rc.topic_id,\n    rc.sentiment_id,\n    rc.region_id,\n    \n    -- Informations descriptives\n    rc.bank_name,\n    rc.branch_name,\n    rc.location,\n    rc.city,\n    rc.postal_code,\n    rc.region_name,\n    rc.topic_name,\n    rc.sentiment_label,\n    \n    -- M\u00e9triques de base\n    rc.rating,\n    rc.topic_confidence,\n    rc.review_date,\n    rc.processed_text,\n    \n    -- M\u00e9triques de satisfaction\n    rc.satisfaction_level,\n    rc.satisfaction_score,\n    rc.composite_score,\n    rc.score_sur_100,\n    rc.performance_category,\n    \n    -- Indicateurs binaires\n    rc.is_positive_rating,\n    rc.is_negative_rating,\n    rc.is_positive_sentiment,\n    rc.is_negative_sentiment,\n    \n    -- Dimensions temporelles\n    rc.review_year,\n    rc.review_month,\n    rc.review_quarter,\n    rc.year_month,\n    rc.year_quarter,\n    rc.day_of_week,\n    rc.week_period,\n    rc.review_age_days,\n    rc.review_freshness,\n    \n    -- M\u00e9triques de qualit\u00e9\n    rc.confidence_level,\n    rc.text_length,\n    rc.review_detail_level,\n    rc.sentiment_rating_alignment,\n    rc.reliability_indicator,\n    \n    -- Contexte agence\n    rc.branch_avg_rating,\n    rc.branch_avg_confidence,\n    rc.total_reviews_branch,\n    rc.branch_review_volume_category,\n    rc.branch_maturity,\n    \n    -- Contexte banque\n    rc.bank_avg_rating,\n    rc.bank_avg_confidence,\n    rc.total_reviews_bank,\n    rc.bank_market_share_region,\n    rc.bank_rank_in_region,\n    \n    -- Contexte localisation\n    rc.location_avg_rating,\n    rc.total_reviews_location,\n    \n    -- Contexte r\u00e9gional\n    rc.region_avg_rating,\n    rc.region_avg_composite_score,\n    rc.region_avg_confidence,\n    rc.total_reviews_region,\n    rc.total_banks_region,\n    rc.total_branches_region,\n    \n    -- Contexte topic\n    rc.topic_avg_rating,\n    rc.total_reviews_topic,\n    \n    -- Performance relative\n    rc.rating_vs_bank_avg,\n    rc.confidence_vs_bank_avg,\n    rc.rating_vs_location_avg,\n    rc.rating_vs_topic_avg,\n    ROUND(CAST(rc.rating - rc.region_avg_rating AS NUMERIC), 2) AS rating_vs_region_avg,\n    \n    -- Segments de performance\n    rc.performance_vs_bank,\n    rc.performance_vs_location,\n    rc.regional_performance_segment,\n    \n    -- M\u00e9triques calcul\u00e9es pour l'analyse\n    -- \u00c9cart-type pour mesurer la variabilit\u00e9\n    ROUND(CAST(STDDEV(rc.rating) OVER (PARTITION BY rc.bank_id) AS NUMERIC), 2) AS bank_rating_std,\n    ROUND(CAST(STDDEV(rc.rating) OVER (PARTITION BY rc.region_id) AS NUMERIC), 2) AS region_rating_std,\n    \n    -- Coefficient de variation (mesure de consistance)\n    CASE \n        WHEN rc.bank_avg_rating > 0 THEN \n            ROUND(CAST(STDDEV(rc.rating) OVER (PARTITION BY rc.bank_id) / rc.bank_avg_rating AS NUMERIC), 2)\n        ELSE NULL\n    END AS bank_rating_cv,\n    \n    -- Index de performance composite (comparaison multi-niveaux)\n    ROUND(CAST(\n        (rc.rating_vs_bank_avg * 0.3) + \n        (rc.rating_vs_location_avg * 0.3) + \n        (rc.rating - rc.region_avg_rating * 0.4)\n    AS NUMERIC), 2) AS performance_index,\n    \n    -- Timestamp de cr\u00e9ation\n    CURRENT_TIMESTAMP AS created_at\n\nFROM regional_context rc\n\n-- Ajout d'un index pour optimiser les performances\n", "relation_name": "\"google_reviews_db\".\"public_public\".\"fact_reviews_complete\"", "batch_results": null}], "elapsed_time": 9.962745428085327, "args": {"partial_parse": true, "macro_debugging": false, "version_check": true, "partial_parse_file_diff": true, "printer_width": 80, "strict_mode": false, "log_path": "/home/elhassan/airflow/star_schema_dbt/logs", "require_explicit_package_overrides_for_builtin_materializations": true, "use_colors_file": true, "log_format": "default", "log_format_file": "debug", "skip_nodes_if_on_run_start_fails": false, "state_modified_compare_more_unrendered_values": false, "introspect": true, "source_freshness_run_project_hooks": false, "log_level": "info", "require_batched_execution_for_custom_microbatch_strategy": false, "static_parser": true, "state_modified_compare_vars": false, "favor_state": false, "cache_selected_only": false, "populate_cache": true, "profiles_dir": "/home/elhassan/.dbt", "require_nested_cumulative_type_params": false, "require_yaml_configuration_for_mf_time_spines": false, "use_colors": true, "show_resource_report": false, "which": "run", "invocation_command": "dbt run", "log_file_max_bytes": 10485760, "send_anonymous_usage_stats": true, "select": [], "write_json": true, "print": true, "require_resource_names_without_spaces": false, "log_level_file": "debug", "vars": {}, "empty": false, "defer": false, "exclude": [], "quiet": false, "warn_error_options": {"include": [], "exclude": []}, "project_dir": "/home/elhassan/airflow/star_schema_dbt", "indirect_selection": "eager"}}